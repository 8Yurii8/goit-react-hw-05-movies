{"version":3,"file":"static/js/597.574d5a42.chunk.js","mappings":"oOACMA,EAAW,gCACXC,EAAM,4CAGCC,EAAc,SAACC,EAAQC,GAClC,OAAOC,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAHS,uBAGT,OAAoCG,GAApC,OAA6CC,EAA7C,YAA2DH,GACnE,EAEYK,EAAiB,SAAAF,GAC5B,OAAOC,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAAwBI,EAAxB,YAAsCH,GAC9C,EAEYM,EAAU,SAAAH,GACrB,OAAOC,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAAwBI,EAAxB,YAAsCH,GAC9C,C,8ECkCD,UA5Ca,SAAC,GAAiB,IAAfO,EAAc,EAAdA,QACRC,GAASC,EAAAA,EAAAA,MACf,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,YACU,WAChB,IAAMV,EAAU,gBAAYK,EAAOD,QAAnB,4BAChBD,EAAAA,EAAAA,IAAQH,GACLW,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAASC,KACtBJ,EAAQI,EAAKL,KACd,IACAM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,GACdN,EAAQ,GACT,GACJ,CAEDQ,EACD,GAAE,CAACb,EAASC,EAAOD,WAGlB,wBACGI,EAAKU,KAAI,SAAAC,GAAM,OACd,2BACE,gBACEC,IAAG,0CAAqCD,EAAOE,cAC/CC,MAAO,QACPC,IAAKJ,EAAOK,QAEd,4BACE,uBAAIL,EAAOK,QACX,uBAAIL,EAAOM,iBARNN,EAAOO,GADF,KAerB,C","sources":["components/Api.jsx","components/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '&api_key=a12547abec0d5f114d2002493fcf19d3';\nconst pageQuery = 'search/movie?query=';\n\nexport const fetchImages = (search, pageParams) => {\n  return axios.get(`${BASE_URL}${pageQuery}${search}${pageParams}&${KEY}`);\n};\n\nexport const fetchTopMovies = pageParams => {\n  return axios.get(`${BASE_URL}${pageParams}&${KEY}`);\n};\n\nexport const fetchId = pageParams => {\n  return axios.get(`${BASE_URL}${pageParams}&${KEY}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { fetchId } from './Api';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Cast = ({ movieId }) => {\n  const params = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = () => {\n      const pageParams = `movie/${params.movieId}/credits?language=en-US`;\n      fetchId(pageParams)\n        .then(response => {\n          const data = response.data;\n          setCast(data.cast);\n        })\n        .catch(error => {\n          console.error(error);\n          setCast([]);\n        });\n    };\n\n    fetchCast();\n  }, [movieId, params.movieId]);\n\n  return (\n    <ul>\n      {cast.map(person => (\n        <li key={person.id}>\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\n            width={'100px'}\n            alt={person.name}\n          />\n          <div>\n            <p>{person.name}</p>\n            <p>{person.character}</p>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCast.propTypes = {\n  moviesId: PropTypes.number,\n};\n\nexport default Cast;\n"],"names":["BASE_URL","KEY","fetchImages","search","pageParams","axios","fetchTopMovies","fetchId","movieId","params","useParams","useState","cast","setCast","useEffect","then","response","data","catch","error","console","fetchCast","map","person","src","profile_path","width","alt","name","character","id"],"sourceRoot":""}